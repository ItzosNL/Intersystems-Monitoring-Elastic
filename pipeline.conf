input {
	http {
		# inbound port for data from Intersystems-Monitoring, default is 8080
		port => 8080
		# enable or disable ssl, default is false
		ssl => false
		# path to certificate, required if ssl is enabled
		ssl_certificate => ""
		# path to certificate key, required if ssl is enabled
		ssl_key => ""
	}
}

filter {
	json {
		# data from Intersystems-Monitoring is always in the "message" field
		source => "message"
	}
	# rename array for filtering purposes in Kibana
	if [Aanleveringen] {
		mutate {
			rename => ["Aanleveringen", "mm" ]
		}
		# split array into seperate messages
		split {
			field => "mm"
		}
		# add target index for Elasticsearch and remove orginal message field
		mutate {
			add_field => { "[@metadata][target_index]" => "mm_aanleveringen_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [Logregels] {
		mutate {
			rename => ["Logregels", "mm" ]
		}
		split {
			field => "mm"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "mm_logregels_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [AuthTraceData] {
		mutate {
			rename => ["AuthTraceData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_authtracedata_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [MMErrorData] {
		mutate {
			rename => ["MMErrorData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_mmerrordata_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [ClientStatusData] {
		mutate {
			rename => ["ClientStatusData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_clientstatusdata_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [MedMijEventData] {
		mutate {
			rename => ["MedMijEventData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_medmijeventdata_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [AuthErrorData] {
		mutate {
			rename => ["AuthErrorData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_autherrordata_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [MedMijLogData] {
		mutate {
			rename => ["MedMijLogData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_medmijlog_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [AortaLogData] {
		mutate {
			rename => ["AortaLogData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_aortalog_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [LicenseData] {
		mutate {
			rename => ["LicenseData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_license_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [TaskData] {
		mutate {
			rename => ["TaskData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_task_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [HeaderData] {
		mutate {
			rename => ["HeaderData", "iris" ]
		}
		split {
			field => "iris"
		}
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_header_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}		
	else if [CouplingData] {
		mutate {
			rename => ["CouplingData", "iris" ]
		}
		split {
			field => "iris"
		}		
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_coupling_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}	
	else if [EventLogData] {
		mutate {
			rename => ["EventLogData", "iris" ]
		}
		split {
			field => "iris"
		}	
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_event_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [ProductionData] {
		mutate {
			rename => ["ProductionData", "iris" ]
		}
		split {
			field => "iris"
		}			
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_production_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			add_field => { "iris.production_id" => "%{[iris][ProductionName]}_%{[headers][instance_name]}_%{[headers][instance_otap]}" }
			add_field => { "iris.Namespace" => "%{[iris][NameSpace]}" }
			remove_field => [ "message" ]
		}
	}
	else if [MonitorData] {
		mutate {
			rename => ["MonitorData", "iris" ]
			add_field => { "[@metadata][target_index]" => "iris_system_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}
	}
	else if [AuditIndex] {
		mutate {
			add_field => { "[@metadata][target_index]" => "iris_audit_%{[headers][instance_name]}_%{[headers][instance_otap]}_%{+YYYY.MM}" }
			remove_field => [ "message" ]
		}	
	}
	else {
		drop { }
	}
}

output {
	elasticsearch {
		# cloud id of target Elastic Cloud cluster, required
		cloud_id => ""
		# CA path, optional
		cacert => ""
		# enable or disable cert verification, optional
		ssl_certificate_verification => false
		# Elasticsearch username for storing data, required
		user => ""
		# Elasticsearch password for storing data, required
		password => ""
		# target index, required, default is %{[@metadata][target_index]}
		index => "%{[@metadata][target_index]}"
		}
}
